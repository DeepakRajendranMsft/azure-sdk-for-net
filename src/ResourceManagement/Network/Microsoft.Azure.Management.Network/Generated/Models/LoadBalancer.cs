// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator 0.17.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// LoadBalancer resource
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class LoadBalancer : Resource
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancer class.
        /// </summary>
        public LoadBalancer() { }

        /// <summary>
        /// Initializes a new instance of the LoadBalancer class.
        /// </summary>
        /// <param name="id">Resource Id</param>
        /// <param name="name">Resource name</param>
        /// <param name="type">Resource type</param>
        /// <param name="location">Resource location</param>
        /// <param name="tags">Resource tags</param>
        /// <param name="frontendIPConfigurations">Gets or sets frontend IP
        /// addresses of the load balancer</param>
        /// <param name="backendAddressPools">Gets or sets Pools of backend IP
        /// addresses</param>
        /// <param name="loadBalancingRules">Gets or sets load balancing
        /// rules</param>
        /// <param name="probes">Gets or sets list of Load balancer
        /// probes</param>
        /// <param name="inboundNatRules">Gets or sets list of inbound
        /// rules</param>
        /// <param name="inboundNatPools">Gets or sets inbound NAT
        /// pools</param>
        /// <param name="outboundNatRules">Gets or sets outbound NAT
        /// rules</param>
        /// <param name="resourceGuid">Gets or sets resource guid property of
        /// the Load balancer resource</param>
        /// <param name="provisioningState">Gets provisioning state of the
        /// PublicIP resource Updating/Deleting/Failed</param>
        /// <param name="etag">Gets a unique read-only string that changes
        /// whenever the resource is updated</param>
        public LoadBalancer(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), System.Collections.Generic.IList<FrontendIPConfiguration> frontendIPConfigurations = default(System.Collections.Generic.IList<FrontendIPConfiguration>), System.Collections.Generic.IList<BackendAddressPool> backendAddressPools = default(System.Collections.Generic.IList<BackendAddressPool>), System.Collections.Generic.IList<LoadBalancingRule> loadBalancingRules = default(System.Collections.Generic.IList<LoadBalancingRule>), System.Collections.Generic.IList<Probe> probes = default(System.Collections.Generic.IList<Probe>), System.Collections.Generic.IList<InboundNatRule> inboundNatRules = default(System.Collections.Generic.IList<InboundNatRule>), System.Collections.Generic.IList<InboundNatPool> inboundNatPools = default(System.Collections.Generic.IList<InboundNatPool>), System.Collections.Generic.IList<OutboundNatRule> outboundNatRules = default(System.Collections.Generic.IList<OutboundNatRule>), string resourceGuid = default(string), string provisioningState = default(string), string etag = default(string))
            : base(id, name, type, location, tags)
        {
            FrontendIPConfigurations = frontendIPConfigurations;
            BackendAddressPools = backendAddressPools;
            LoadBalancingRules = loadBalancingRules;
            Probes = probes;
            InboundNatRules = inboundNatRules;
            InboundNatPools = inboundNatPools;
            OutboundNatRules = outboundNatRules;
            ResourceGuid = resourceGuid;
            ProvisioningState = provisioningState;
            Etag = etag;
        }

        /// <summary>
        /// Gets or sets frontend IP addresses of the load balancer
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfigurations")]
        public System.Collections.Generic.IList<FrontendIPConfiguration> FrontendIPConfigurations { get; set; }

        /// <summary>
        /// Gets or sets Pools of backend IP addresses
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPools")]
        public System.Collections.Generic.IList<BackendAddressPool> BackendAddressPools { get; set; }

        /// <summary>
        /// Gets or sets load balancing rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancingRules")]
        public System.Collections.Generic.IList<LoadBalancingRule> LoadBalancingRules { get; set; }

        /// <summary>
        /// Gets or sets list of Load balancer probes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.probes")]
        public System.Collections.Generic.IList<Probe> Probes { get; set; }

        /// <summary>
        /// Gets or sets list of inbound rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatRules")]
        public System.Collections.Generic.IList<InboundNatRule> InboundNatRules { get; set; }

        /// <summary>
        /// Gets or sets inbound NAT pools
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatPools")]
        public System.Collections.Generic.IList<InboundNatPool> InboundNatPools { get; set; }

        /// <summary>
        /// Gets or sets outbound NAT rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundNatRules")]
        public System.Collections.Generic.IList<OutboundNatRule> OutboundNatRules { get; set; }

        /// <summary>
        /// Gets or sets resource guid property of the Load balancer resource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid { get; set; }

        /// <summary>
        /// Gets provisioning state of the PublicIP resource
        /// Updating/Deleting/Failed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource
        /// is updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag { get; set; }

    }
}
